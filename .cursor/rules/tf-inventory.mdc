---
description: 
globs: 
alwaysApply: true
---
## TensorFlow & TensorFlow Probability Usage Inventory

Here is a list of all identified usages of TensorFlow and TensorFlow Probability in the repository:

**`demo/Meridian_Getting_Started.ipynb`**

*   **L31 (Cell 2):** `import tensorflow as tf` (TensorFlow)
*   **L32 (Cell 2):** `import tensorflow_probability as tfp` (TensorFlow Probability)
*   **L42 (Cell 2):** `tf.config.experimental.list_physical_devices('GPU')` (TensorFlow)
*   **L43 (Cell 2):** `tf.config.experimental.list_physical_devices('CPU')` (TensorFlow)
*   **L8 (Cell 6):** `tfp.distributions.LogNormal(roi_mu, roi_sigma, name=constants.ROI_M)` (TensorFlow Probability)

**`demo/Meridian_RF_Demo.ipynb`**

*   **L31 (Cell 2):** `import tensorflow as tf` (TensorFlow)
*   **L32 (Cell 2):** `import tensorflow_probability as tfp` (TensorFlow Probability)
*   **L42 (Cell 2):** `tf.config.experimental.list_physical_devices('GPU')` (TensorFlow)
*   **L43 (Cell 2):** `tf.config.experimental.list_physical_devices('CPU')` (TensorFlow)
*   **L8 (Cell 6):** `tfp.distributions.LogNormal(roi_rf_mu, roi_rf_sigma, name=constants.ROI_RF)` (TensorFlow Probability)

**`meridian/analysis/analyzer_test.py`**

*   **L23 (Module):** `import tensorflow as tf` (TensorFlow)
*   **L24 (Module):** `import tensorflow_probability as tfp` (TensorFlow Probability)
*   **L30 (Function `_convert_with_swap`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L32 (Function `_convert_with_swap`):** `tf.convert_to_tensor(array)` (TensorFlow)
*   **L34 (Function `_convert_with_swap`):** `tf.transpose(tensor, perm=perm)` (TensorFlow)
*   **L45 (Class `AnalyzerTest`):** `tf.test.TestCase` (TensorFlow)
*   **L94 (Method `test_get_central_tendency_and_ci`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L128 (Method `test_expected_outcome_wrong_new_data_dims_raises_exception`):** `tf.ones((_N_GEOS, _N_TIMES))` (TensorFlow)
*   **L137 (Method `test_expected_outcome_wrong_new_data_geos_raises_exception`):** `tf.ones((6, _N_MEDIA_TIMES, _N_MEDIA_CHANNELS))` (TensorFlow)
*   **L147 (Method `test_expected_outcome_wrong_new_data_times_raises_exception`):** `tf.ones((_N_GEOS, 10, _N_MEDIA_CHANNELS))` (TensorFlow)
*   **L157 (Method `test_expected_outcome_wrong_new_data_channels_raises_exception`):** `tf.ones((_N_GEOS, _N_TIMES, 3))` (TensorFlow)
*   **L232 (Method `test_incremental_outcome_wrong_media_param_dims_raises_exception`):** `tf.ones((5, 1))` (TensorFlow)
*   **L244 (Method `test_incremental_outcome_missing_new_param_raises_exception`):** `tf.ones((_N_GEOS, 10, _N_MEDIA_CHANNELS))` (TensorFlow)
*   **L245 (Method `test_incremental_outcome_missing_new_param_raises_exception`):** `tf.ones((_N_GEOS, 10, _N_RF_CHANNELS))` (TensorFlow)
*   **L246 (Method `test_incremental_outcome_missing_new_param_raises_exception`):** `tf.ones((_N_GEOS, 10, _N_RF_CHANNELS))` (TensorFlow)
*   **L247 (Method `test_incremental_outcome_missing_new_param_raises_exception`):** `tf.ones((_N_GEOS, 10))` (TensorFlow)
*   **L278 (Method `test_incremental_outcome_flexible_times_selected_times_wrong_type`):** `tf.ones((_N_GEOS, 10, _N_MEDIA_CHANNELS))` (TensorFlow)
*   **L279 (Method `test_incremental_outcome_flexible_times_selected_times_wrong_type`):** `tf.ones((_N_GEOS, 10, _N_RF_CHANNELS))` (TensorFlow)
*   **L280 (Method `test_incremental_outcome_flexible_times_selected_times_wrong_type`):** `tf.ones((_N_GEOS, 10, _N_RF_CHANNELS))` (TensorFlow)
*   **L281 (Method `test_incremental_outcome_flexible_times_selected_times_wrong_type`):** `tf.ones((_N_GEOS, 10))` (TensorFlow)
*   **L295 (Method `test_incremental_outcome_flexible_times_media_selected_times_wrong_type`):** `tf.ones((_N_GEOS, 10, _N_MEDIA_CHANNELS))` (TensorFlow)
*   **L296 (Method `test_incremental_outcome_flexible_times_media_selected_times_wrong_type`):** `tf.ones((_N_GEOS, 10, _N_RF_CHANNELS))` (TensorFlow)
*   **L297 (Method `test_incremental_outcome_flexible_times_media_selected_times_wrong_type`):** `tf.ones((_N_GEOS, 10, _N_RF_CHANNELS))` (TensorFlow)
*   **L298 (Method `test_incremental_outcome_flexible_times_media_selected_times_wrong_type`):** `tf.ones((_N_GEOS, 10))` (TensorFlow)
*   **L331 (Method `test_incremental_outcome_new_params_diff_time_dims_raises_exception`):** `tf.ones((_N_GEOS, 10, _N_MEDIA_CHANNELS))` (TensorFlow)
*   **L332 (Method `test_incremental_outcome_new_params_diff_time_dims_raises_exception`):** `tf.ones((_N_GEOS, 10, _N_RF_CHANNELS))` (TensorFlow)
*   **L333 (Method `test_incremental_outcome_new_params_diff_time_dims_raises_exception`):** `tf.ones((_N_GEOS, 10, _N_RF_CHANNELS))` (TensorFlow)
*   **L334 (Method `test_incremental_outcome_new_params_diff_time_dims_raises_exception`):** `tf.ones((_N_GEOS, 8))` (TensorFlow)
*   **L344 (Method `test_incremental_outcome_wrong_new_param_n_geos_raises_exception`):** `tf.ones(shape)` (TensorFlow)
*   **L353 (Method `test_incremental_outcome_wrong_n_channels_raises_exception`):** `tf.ones(shape)` (TensorFlow)
*   **L368 (Method `test_incremental_outcome_new_revenue_per_kpi_correct_shape`):** `tf.ones((_N_GEOS, _N_TIMES))` (TensorFlow)
*   **L379 (Method `test_incremental_outcome_media_selected_times_all_false_returns_zero`):** `tf.zeros_like(no_media_times)` (TensorFlow)
*   **L391 (Method `test_incremental_outcome_no_overlap_between_media_and_selected_times`):** `tf.zeros_like(outcome)` (TensorFlow)
*   **L404 (Method `test_incremental_outcome_media_and_selected_times_overlap_non_zero`):** `tf.reduce_mean(outcome, axis=(0, 1))` (TensorFlow)
*   **L405 (Method `test_incremental_outcome_media_and_selected_times_overlap_non_zero`):** `tf.zeros_like(mean_inc_outcome)` (TensorFlow)
*   **L451 (Method `test_incremental_outcome_media_and_rf`):** `tf.convert_to_tensor(expected_outcome)` (TensorFlow)
*   **L474 (Method `test_compute_incremental_outcome_aggregate_media_and_rf`):** `tf.concat([mock_incremental_outcome, incremental_outcome_with_totals], -1)` (TensorFlow)
*   **L498 (Method `test_incremental_outcome_media_and_rf_new_params`):** `tf.convert_to_tensor(test_utils.INC_OUTCOME_MEDIA_AND_RF_NEW_PARAMS)` (TensorFlow)
*   **L600 (Method `test_marginal_roi_media_and_rf`):** `tf.convert_to_tensor(expected_mroi)` (TensorFlow)
*   **L697 (Method `test_roi_wrong_new_data_dims_raises_exception`):** `tf.ones((_N_GEOS, _N_TIMES))` (TensorFlow)
*   **L706 (Method `test_roi_wrong_new_data_geos_raises_exception`):** `tf.ones((6, _N_MEDIA_TIMES, _N_MEDIA_CHANNELS))` (TensorFlow)
*   **L719 (Method `test_roi_wrong_new_data_times_raises_exception`):** `tf.ones((_N_GEOS, 10, _N_RF_CHANNELS))` (TensorFlow)
*   **L728 (Method `test_roi_wrong_new_data_channels_raises_exception`):** `tf.ones((_N_GEOS, _N_TIMES, 3))` (TensorFlow)
*   **L1156 (Method `test_get_aggregated_spend_new_data_correct_values`):** `tf.convert_to_tensor([[[1, 2], [2, 3], [3, 4]]])` (TensorFlow)
*   **L1278 (Method `test_get_aggregated_spend_with_no_channel_selected`):** `ValueError` (TensorFlow built-in type, technically part of TF but very generic)

**`meridian/analysis/analyzer.py`**

*   **L23 (Module):** `import tensorflow as tf` (TensorFlow)
*   **L24 (Module):** `import tensorflow_probability as tfp` (TensorFlow Probability)
*   **L38 (Class `DataTensors`):** `tf.experimental.ExtensionType` (TensorFlow)
*   **L48 (Class `DataTensors`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L49 (Class `DataTensors`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L50 (Class `DataTensors`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L51 (Class `DataTensors`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L52 (Class `DataTensors`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L53 (Class `DataTensors`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L54 (Class `DataTensors`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L55 (Class `DataTensors`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L56 (Class `DataTensors`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L57 (Class `DataTensors`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L58 (Class `DataTensors`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L59 (Class `DataTensors`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L68 (Method `__init__`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L69 (Method `__init__`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L70 (Method `__init__`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L71 (Method `__init__`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L72 (Method `__init__`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L73 (Method `__init__`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L74 (Method `__init__`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L75 (Method `__init__`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L76 (Method `__init__`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L77 (Method `__init__`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L78 (Method `__init__`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L79 (Method `__init__`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L81 (Method `__init__`):** `self.media = tf.cast(media, tf.float32) if media is not None else None` (TensorFlow)
*   **L82 (Method `__init__`):** `self.media_spend = tf.cast(media_spend, tf.float32) if media_spend is not None else None` (TensorFlow)
*   **L85 (Method `__init__`):** `self.reach = tf.cast(reach, tf.float32) if reach is not None else None` (TensorFlow)
*   **L86 (Method `__init__`):** `self.frequency = tf.cast(frequency, tf.float32) if frequency is not None else None` (TensorFlow)
*   **L89 (Method `__init__`):** `self.rf_spend = tf.cast(rf_spend, tf.float32) if rf_spend is not None else None` (TensorFlow)
*   **L92 (Method `__init__`):** `self.organic_media = tf.cast(organic_media, tf.float32) if organic_media is not None else None` (TensorFlow)
*   **L96 (Method `__init__`):** `self.organic_reach = tf.cast(organic_reach, tf.float32) if organic_reach is not None else None` (TensorFlow)
*   **L100 (Method `__init__`):** `self.organic_frequency = tf.cast(organic_frequency, tf.float32) if organic_frequency is not None else None` (TensorFlow)
*   **L104 (Method `__init__`):** `self.non_media_treatments = tf.cast(non_media_treatments, tf.float32) if non_media_treatments is not None else None` (TensorFlow)
*   **L108 (Method `__init__`):** `self.controls = tf.cast(controls, tf.float32) if controls is not None else None` (TensorFlow)
*   **L111 (Method `__init__`):** `self.revenue_per_kpi = tf.cast(revenue_per_kpi, tf.float32) if revenue_per_kpi is not None else None` (TensorFlow)
*   **L115 (Method `__init__`):** `self.time = tf.cast(time, tf.string) if time is not None else None` (TensorFlow)
*   **L127 (Method `total_spend`):** `tf.Tensor | None` (TensorFlow Type Hint)
*   **L138 (Method `total_spend`):** `tf.concat(spend_tensors, axis=-1) if spend_tensors else None` (TensorFlow)
*   **L253 (Class `DistributionTensors`):** `tf.experimental.ExtensionType` (TensorFlow)
*   **L256 (Class `DistributionTensors`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L257 (Class `DistributionTensors`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L258 (Class `DistributionTensors`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L259 (Class `DistributionTensors`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L260 (Class `DistributionTensors`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L261 (Class `DistributionTensors`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L262 (Class `DistributionTensors`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L263 (Class `DistributionTensors`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L264 (Class `DistributionTensors`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L265 (Class `DistributionTensors`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L266 (Class `DistributionTensors`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L267 (Class `DistributionTensors`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L268 (Class `DistributionTensors`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L269 (Class `DistributionTensors`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L270 (Class `DistributionTensors`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L271 (Class `DistributionTensors`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L272 (Class `DistributionTensors`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L273 (Class `DistributionTensors`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L274 (Class `DistributionTensors`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L275 (Class `DistributionTensors`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L279 (Function `_transformed_new_or_scaled`):** `tf.Tensor | None` (TensorFlow Type Hint)
*   **L281 (Function `_transformed_new_or_scaled`):** `tf.Tensor | None` (TensorFlow Type Hint)
*   **L290 (Function `_transformed_new_or_scaled`):** `tf.Tensor | None` (TensorFlow Type Hint)
*   **L299 (Function `get_central_tendency_and_ci`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L303 (Function `get_central_tendency_and_ci`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L376 (Class `Analyzer`):** `tf.function(jit_compile=True)` (TensorFlow)
*   **L379 (Method `_get_kpi_means`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L395 (Method `_get_kpi_means`):** `tau_gt = tf.expand_dims(dist_tensors.tau_g, -1) + tf.expand_dims(dist_tensors.mu_t, -2)` (TensorFlow)
*   **L403 (Method `_get_kpi_means`):** `tf.einsum("...gtm,...gm->...gt", combined_media_transformed, combined_beta)` (TensorFlow)
*   **L407 (Method `_get_kpi_means`):** `tf.einsum("...gtc,...gc->...gt", data_tensors.controls, dist_tensors.gamma_gc,)` (TensorFlow)
*   **L411 (Method `_get_kpi_means`):** `result += tf.einsum("...gtm,...gm->...gt", data_tensors.non_media_treatments, dist_tensors.gamma_gn,)` (TensorFlow)
*   **L485 (Method `_get_adstock_dataframe`):** `decayed_effect_prior_transpose = tf.transpose(decayed_effect_prior, perm=[1, 2, 0, 3])` (TensorFlow)
*   **L488 (Method `_get_adstock_dataframe`):** `decayed_effect_posterior_transpose = tf.transpose(decayed_effect_posterior, perm=[1, 2, 0, 3])` (TensorFlow)
*   **L683 (Method `_get_transformed_media_and_beta`):** `tf.Tensor | None` (TensorFlow Type Hint)
*   **L684 (Method `_get_transformed_media_and_beta`):** `tf.Tensor | None` (TensorFlow Type Hint)
*   **L739 (Method `_get_transformed_media_and_beta`):** `combined_media_transformed = tf.concat(combined_medias, axis=-1)` (TensorFlow)
*   **L740 (Method `_get_transformed_media_and_beta`):** `combined_beta = tf.concat(combined_betas, axis=-1)` (TensorFlow)
*   **L747 (Method `filter_and_aggregate_geos_and_times`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L749 (Method `filter_and_aggregate_geos_and_times`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L788 (Method `filter_and_aggregate_geos_and_times`):** `tf.TensorShape(shape)` (TensorFlow)
*   **L791 (Method `filter_and_aggregate_geos_and_times`):** `tf.TensorShape([mmm.n_geos, n_times])` (TensorFlow)
*   **L809 (Method `filter_and_aggregate_geos_and_times`):** `tensor = tf.boolean_mask(tensor, geo_mask, axis=geo_dim)` (TensorFlow)
*   **L820 (Method `filter_and_aggregate_geos_and_times`):** `tensor = tf.boolean_mask(tensor, time_mask, axis=time_dim)` (TensorFlow)
*   **L822 (Method `filter_and_aggregate_geos_and_times`):** `tensor = tf.boolean_mask(tensor, selected_times, axis=time_dim)` (TensorFlow)
*   **L829 (Method `filter_and_aggregate_geos_and_times`):** `tf.einsum(f"{tensor_dims}->...{output_dims}", tensor)` (TensorFlow)
*   **L854 (Method `expected_outcome`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L932 (Method `expected_outcome`):** `outcome_means = tf.zeros((n_chains, 0, self._meridian.n_geos, self._meridian.n_times))` (TensorFlow)
*   **L940 (Method `expected_outcome`):** `batch_dists = {k: tf.convert_to_tensor(params[k][:, start_index:stop_index, ...]) for k in param_list}` (TensorFlow)
*   **L948 (Method `expected_outcome`):** `outcome_means = tf.concat([outcome_means, *outcome_means_temps], axis=1)` (TensorFlow)
*   **L979 (Method `_get_incremental_kpi`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L997 (Method `_get_incremental_kpi`):** `combined_media_kpi = tf.einsum("...gtm,...gm->...gtm", combined_media_transformed, combined_beta,)` (TensorFlow)
*   **L1005 (Method `_get_incremental_kpi`):** `non_media_kpi = tf.einsum("gtn,...gn->...gtn", data_tensors.non_media_treatments - non_media_scaled_baseline, dist_tensors.gamma_gn,)` (TensorFlow)
*   **L1008 (Method `_get_incremental_kpi`):** `return tf.concat([combined_media_kpi, non_media_kpi], axis=-1)` (TensorFlow)
*   **L1018 (Method `_inverse_outcome`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L1021 (Method `_inverse_outcome`):** `tf.Tensor | None` (TensorFlow Type Hint)
*   **L1027 (Method `_inverse_outcome`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L1036 (Method `_inverse_outcome`):** `t1 = self._meridian.kpi_transformer.inverse(tf.einsum("...m->m...", modeled_incremental_outcome))` (TensorFlow)
*   **L1039 (Method `_inverse_outcome`):** `t2 = self._meridian.kpi_transformer.inverse(tf.zeros_like(t1))` (TensorFlow)
*   **L1040 (Method `_inverse_outcome`):** `kpi = tf.einsum("m...->...m", t1 - t2)` (TensorFlow)
*   **L1044 (Method `_inverse_outcome`):** `return tf.einsum("gt,...gtm->...gtm", revenue_per_kpi, kpi)` (TensorFlow)
*   **L1046 (Method `_incremental_outcome_impl`):** `tf.function(jit_compile=True)` (TensorFlow)
*   **L1057 (Method `_incremental_outcome_impl`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L1282 (Method `marginal_roi`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L1346 (Method `marginal_roi`):** `return tf.math.divide_no_nan(numerator, denominator)` (TensorFlow)
*   **L1349 (Method `roi`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L1419 (Method `roi`):** `return tf.math.divide_no_nan(incremental_outcome, denominator)` (TensorFlow)
*   **L1422 (Method `cpik`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L1469 (Method `cpik`):** `return tf.math.divide_no_nan(1.0, roi)` (TensorFlow)
*   **L1475 (Method `_mean_and_ci_by_eval_set`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L1581 (Method `_calculate_baseline_expected_outcome`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L1612 (Method `_calculate_baseline_expected_outcome`):** `new_media = tf.zeros_like(self._meridian.media_tensors.media) if self._meridian.media_tensors.media is not None else None` (TensorFlow)
*   **L1618 (Method `_calculate_baseline_expected_outcome`):** `new_reach = tf.zeros_like(self._meridian.rf_tensors.reach) if self._meridian.rf_tensors.reach is not None else None` (TensorFlow)
*   **L1621 (Method `_calculate_baseline_expected_outcome`):** `new_organic_media = tf.zeros_like(self._meridian.organic_media_tensors.organic_media) if self._meridian.organic_media_tensors.organic_media is not None else None` (TensorFlow)
*   **L1627 (Method `_calculate_baseline_expected_outcome`):** `new_organic_reach = tf.zeros_like(self._meridian.organic_rf_tensors.organic_reach) if self._meridian.organic_rf_tensors.organic_reach is not None else None` (TensorFlow)
*   **L1634 (Method `_calculate_baseline_expected_outcome`):** `new_non_media_treatments = _compute_non_media_baseline(non_media_treatments=self._meridian.non_media_treatments, non_media_baseline_values=non_media_baseline_values,)` (TensorFlow)
*   **L1660 (Method `compute_incremental_outcome_aggregate`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L1706 (Method `compute_incremental_outcome_aggregate`):** `incremental_outcome_total = tf.reduce_sum(incremental_outcome_m, axis=-1, keepdims=True)` (TensorFlow)
*   **L1709 (Method `compute_incremental_outcome_aggregate`):** `tf.concat([incremental_outcome_m, incremental_outcome_total], axis=-1,)` (TensorFlow)
*   **L1771 (Method `summary_metrics`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L1777 (Method `summary_metrics`):** `aggregated_impressions = self.get_aggregated_impressions(new_data=new_data.filter_fields(constants.IMPRESSIONS_DATA), optimal_frequency=optimal_frequency, include_non_paid_channels=include_non_paid_channels, **dim_kwargs,)` (TensorFlow)
*   **L1784 (Method `summary_metrics`):** `impressions_with_total = tf.concat([aggregated_impressions, tf.reduce_sum(aggregated_impressions, -1, keepdims=True),], axis=-1,)` (TensorFlow)
*   **L2022 (Method `_compute_roi_aggregate`):** `prior=incremental_outcome_prior / spend_with_total` (TensorFlow)
*   **L2023 (Method `_compute_roi_aggregate`):** `posterior=incremental_outcome_posterior / spend_with_total` (TensorFlow)
*   **L2060 (Method `_compute_effectiveness_aggregate`):** `prior=incremental_outcome_prior / impressions_with_total` (TensorFlow)
*   **L2061 (Method `_compute_effectiveness_aggregate`):** `posterior=incremental_outcome_posterior / impressions_with_total` (TensorFlow)
*   **L2081 (Method `_compute_cpik_aggregate`):** `prior=spend_with_total / incremental_kpi_prior` (TensorFlow)
*   **L2082 (Method `_compute_cpik_aggregate`):** `posterior=spend_with_total / incremental_kpi_posterior` (TensorFlow)
*   **L2167 (Method `_impute_and_aggregate_spend`):** `target_media_exe_values = self.filter_and_aggregate_geos_and_times(media_exe_values, **dim_kwargs)` (TensorFlow)
*   **L2170 (Method `_impute_and_aggregate_spend`):** `imputed_cpmu = tf.math.divide_no_nan(channel_spend, np.sum(media_exe_values, (0, 1)),)` (TensorFlow)
*   **L2174 (Method `_impute_and_aggregate_spend`):** `aggregated_spend = (target_media_exe_values * imputed_cpmu).numpy()` (TensorFlow)
*   **L1844 (Method `summary_metrics`):** `tf.cast(baseline_value, tf.float32)` (TensorFlow)
*   **L1849 (Method `_compute_non_media_baseline`):** `* tf.ones_like(non_media_treatments[..., channel])` (TensorFlow)
*   **L1854 (Method `_compute_non_media_baseline`):** `tf.stack(baseline_list, axis=-1)` (TensorFlow)

**`meridian/model/adstock_hill_test.py`**

*   **L20 (Module):** `import tensorflow as tf` (TensorFlow)
*   **L21 (Module):** `import tensorflow_probability as tfp` (TensorFlow Probability)
*   **L23 (Module):** `tfd = tfp.distributions` (TensorFlow Probability)
*   **L34 (Class `TestAdstock`):** `tf.random.set_seed(1)` (TensorFlow)
*   **L35 (Class `TestAdstock`):** `tfd.HalfNormal(1).sample([_N_CHAINS, _N_DRAWS, _N_GEOS, _N_MEDIA_TIMES, _N_MEDIA_CHANNELS])` (TensorFlow Probability)
*   **L38 (Class `TestAdstock`):** `tfd.Uniform(0, 1).sample([_N_CHAINS, _N_DRAWS, _N_MEDIA_CHANNELS])` (TensorFlow Probability)
*   **L68 (Method `test_basic_output`):** `tf.TensorShape(alpha.shape[:-1] + media.shape[-3] + [n_time_output] + alpha.shape[-1])` (TensorFlow)
*   **L71 (Method `test_basic_output`):** `tf.debugging.assert_equal(media_transformed.shape, output_shape, message=msg)` (TensorFlow)
*   **L74 (Method `test_basic_output`):** `tf.debugging.assert_all_finite(media_transformed, message=msg)` (TensorFlow)
*   **L75 (Method `test_basic_output`):** `tf.debugging.assert_non_negative(media_transformed, message=msg)` (TensorFlow)
*   **L82 (Method `test_max_lag_zero`):** `tf.debugging.assert_near(media_transformed, self._MEDIA)` (TensorFlow)
*   **L89 (Method `test_alpha_zero`):** `tf.zeros_like(self._ALPHA)` (TensorFlow)
*   **L93 (Method `test_alpha_zero`):** `tf.debugging.assert_near(media_transformed, self._MEDIA)` (TensorFlow)
*   **L100 (Method `test_media_zero`):** `tf.zeros_like(self._MEDIA)` (TensorFlow)
*   **L103 (Method `test_media_zero`):** `tf.debugging.assert_near(media_transformed, tf.zeros_like(self._MEDIA))` (TensorFlow)
*   **L108 (Method `test_alpha_close_to_one`):** `0.99999 * tf.ones_like(self._ALPHA)` (TensorFlow)
*   **L114 (Method `test_alpha_close_to_one`):** `tf.debugging.assert_near(media_transformed, tf.cumsum(self._MEDIA, axis=-2) / self._N_MEDIA_TIMES, rtol=1e-4, atol=1e-4)` (TensorFlow)
*   **L121 (Method `test_media_all_ones`):** `tf.ones_like(self._MEDIA)` (TensorFlow)
*   **L135 (Method `test_media_all_ones`):** `result = term1 / term2[:, :, None, :]` (TensorFlow)
*   **L137 (Method `test_media_all_ones`):** `tf.tile(result[:, :, None, :, :], multiples=[1, 1, self._N_GEOS, 1, 1])` (TensorFlow)
*   **L139 (Method `test_media_all_ones`):** `tf.debugging.assert_near(media_transformed, result)` (TensorFlow)
*   **L150 (Class `TestHill`):** `tf.random.set_seed(1)` (TensorFlow)
*   **L151 (Class `TestHill`):** `tfd.HalfNormal(1).sample([_N_CHAINS, _N_DRAWS, _N_GEOS, _N_MEDIA_TIMES, _N_MEDIA_CHANNELS])` (TensorFlow Probability)
*   **L154 (Class `TestHill`):** `tfd.Uniform(0, 1).sample([_N_CHAINS, _N_DRAWS, _N_MEDIA_CHANNELS])` (TensorFlow Probability)
*   **L155 (Class `TestHill`):** `tfd.HalfNormal(1).sample([_N_CHAINS, _N_DRAWS, _N_MEDIA_CHANNELS])` (TensorFlow Probability)
*   **L184 (Method `test_basic_output`):** `tf.debugging.assert_equal(media_transformed.shape, self._MEDIA.shape)` (TensorFlow)
*   **L185 (Method `test_basic_output`):** `tf.debugging.assert_all_finite(media_transformed, message="")` (TensorFlow)
*   **L186 (Method `test_basic_output`):** `tf.debugging.assert_non_negative(media_transformed)` (TensorFlow)
*   **L192 (Method `test_known_outputs`):** `tf.zeros_like(_MEDIA)` (TensorFlow)
*   **L195 (Method `test_known_outputs`):** `tf.zeros_like(_MEDIA)` (TensorFlow)
*   **L201 (Method `test_known_outputs`):** `tf.ones_like(_EC)` (TensorFlow)
*   **L202 (Method `test_known_outputs`):** `tf.ones_like(_SLOPE)` (TensorFlow)
*   **L203 (Method `test_known_outputs`):** `result=_MEDIA / (1 + _MEDIA)` (TensorFlow)
*   **L209 (Method `test_known_outputs`):** `tf.zeros_like(_SLOPE)` (TensorFlow)
*   **L210 (Method `test_known_outputs`):** `result=0.5 * tf.ones_like(_MEDIA)` (TensorFlow)
*   **L215 (Method `test_known_outputs`):** `tf.debugging.assert_near(media_transformed, result)` (TensorFlow)

**`meridian/model/adstock_hill.py`**

*   **L19 (Module):** `import tensorflow as tf` (TensorFlow)
*   **L33 (Function `_validate_arguments`):** `tf.TensorShape([])` (TensorFlow)
*   **L33 (Function `_validate_arguments`):** `tf.TensorShape(batch_dims)` (TensorFlow)
*   **L59 (Function `_adstock`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L78 (Function `_adstock`):** `pad_shape = (...)` (TensorFlow)
*   **L83 (Function `_adstock`):** `media = tf.concat([tf.zeros(pad_shape), media], axis=-2)` (TensorFlow)
*   **L87 (Function `_adstock`):** `windowed = tf.stack(window_list)` (TensorFlow)
*   **L88 (Function `_adstock`):** `l_range = tf.range(window_size - 1, -1, -1, dtype=tf.float32)` (TensorFlow)
*   **L89 (Function `_adstock`):** `weights = tf.expand_dims(alpha, -1) ** l_range` (TensorFlow)
*   **L90 (Function `_adstock`):** `normalization_factors = tf.expand_dims((1 - alpha ** (window_size)) / (1 - alpha), -1)` (TensorFlow)
*   **L93 (Function `_adstock`):** `weights = tf.divide(weights, normalization_factors)` (TensorFlow)
*   **L94 (Function `_adstock`):** `return tf.einsum('...mw,w...gtm->...gtm', weights, windowed)` (TensorFlow)
*   **L101 (Function `_hill`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L110 (Function `_hill`):** `tf.TensorShape([])` (TensorFlow)
*   **L110 (Function `_hill`):** `tf.TensorShape(batch_dims)` (TensorFlow)
*   **L117 (Function `_hill`):** `t1 = media ** slope[..., tf.newaxis, tf.newaxis, :]` (TensorFlow)
*   **L118 (Function `_hill`):** `t2 = (ec**slope)[..., tf.newaxis, tf.newaxis, :]` (TensorFlow)
*   **L131 (Method `forward`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L132 (Method `forward`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L154 (Method `forward`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L155 (Method `forward`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L178 (Method `forward`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L179 (Method `forward`):** `tf.Tensor` (TensorFlow Type Hint)

**`meridian/model/model.py`**

*   **L27 (Module):** `import tensorflow as tf` (TensorFlow)
*   **L117 (Class `Meridian`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L120 (Class `Meridian`):** `tf.Tensor | None` (TensorFlow Type Hint)
*   **L123 (Class `Meridian`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L124 (Class `Meridian`):** `tf.Tensor | None` (TensorFlow Type Hint)
*   **L127 (Class `Meridian`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L163 (Method `kpi`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L165 (Method `kpi`):** `return tf.convert_to_tensor(self.input_data.kpi, dtype=tf.float32)` (TensorFlow)
*   **L168 (Method `revenue_per_kpi`):** `tf.Tensor | None` (TensorFlow Type Hint)
*   **L172 (Method `revenue_per_kpi`):** `return tf.convert_to_tensor(self.input_data.revenue_per_kpi, dtype=tf.float32)` (TensorFlow)
*   **L175 (Method `controls`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L177 (Method `controls`):** `return tf.convert_to_tensor(self.input_data.controls, dtype=tf.float32)` (TensorFlow)
*   **L180 (Method `non_media_treatments`):** `tf.Tensor | None` (TensorFlow Type Hint)
*   **L184 (Method `non_media_treatments`):** `return tf.convert_to_tensor(self.input_data.non_media_treatments, dtype=tf.float32)` (TensorFlow)
*   **L188 (Method `population`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L190 (Method `population`):** `return tf.convert_to_tensor(self.input_data.population, dtype=tf.float32)` (TensorFlow)
*   **L193 (Method `total_spend`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L195 (Method `total_spend`):** `return tf.convert_to_tensor(self.input_data.get_total_spend(), dtype=tf.float32)` (TensorFlow)
*   **L260 (Method `baseline_geo_idx`):** `return tf.argmax(self.population)` (TensorFlow)
*   **L263 (Method `holdout_id`):** `tf.Tensor | None` (TensorFlow Type Hint)
*   **L267 (Method `holdout_id`):** `tensor = tf.convert_to_tensor(self.model_spec.holdout_id, dtype=bool)` (TensorFlow)
*   **L268 (Method `holdout_id`):** `return tensor[tf.newaxis, ...] if self.is_national else tensor` (TensorFlow)
*   **L310 (Method `adstock_hill_media`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L311 (Method `adstock_hill_media`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L312 (Method `adstock_hill_media`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L313 (Method `adstock_hill_media`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L315 (Method `adstock_hill_media`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L334 (Method `adstock_hill_rf`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L335 (Method `adstock_hill_rf`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L336 (Method `adstock_hill_rf`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L337 (Method `adstock_hill_rf`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L338 (Method `adstock_hill_rf`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L340 (Method `adstock_hill_rf`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L430 (Method `create_inference_data_dims`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L446 (Method `sample_posterior`):** `tf.Tensor` (TensorFlow Type Hint)

**`meridian/model/posterior_sampler_test.py`**

*   **L21 (Module):** `import tensorflow as tf` (TensorFlow)
*   **L22 (Module):** `import tensorflow_probability as tfp` (TensorFlow Probability)
*   **L55 (Method `setUp`):** `self.test_dist_media_and_rf = collections.OrderedDict({... tf.convert_to_tensor(...) ...})` (TensorFlow)
*   **L61 (Method `setUp`):** `self.test_dist_media_only = collections.OrderedDict({... tf.convert_to_tensor(...) ...})` (TensorFlow)
*   **L66 (Method `setUp`):** `self.test_dist_rf_only = collections.OrderedDict({... tf.convert_to_tensor(...) ...})` (TensorFlow)
*   **L75 (Method `setUp`):** `param: _convert_with_swap(...)` calls `tf.convert_to_tensor` and `tf.transpose` (TensorFlow)
*   **L83 (Method `setUp`):** `param: _convert_with_swap(...)` calls `tf.convert_to_tensor` and `tf.transpose` (TensorFlow)
*   **L89 (Method `setUp`):** `param: _convert_with_swap(...)` calls `tf.convert_to_tensor` and `tf.transpose` (TensorFlow)
*   **L108 (Method `setUp`):** `param: _convert_with_swap(...)` calls `tf.convert_to_tensor` and `tf.transpose` (TensorFlow)
*   **L113 (Method `setUp`):** `trace=self.test_trace` uses `_convert_with_swap` internally. (TensorFlow)
*   **L116 (Method `test_get_joint_dist_zeros`):** `tfp.distributions.Deterministic(0)` (TensorFlow Probability)
*   **L129 (Method `test_get_joint_dist_zeros`):** `tf.zeros(shape=(self._N_DRAWS, self._N_GEOS, self._N_TIMES_SHORT))` (TensorFlow)
*   **L142 (Method `test_get_joint_dist_with_log_prob_media_only`):** `self.assertAllClose` (TensorFlow)
*   **L186 (Method `test_get_joint_dist_with_log_prob_media_only`):** `self.assertAllClose` (TensorFlow)
*   **L203 (Method `test_get_joint_dist_with_log_prob_media_only`):** `tf.einsum(...)` (TensorFlow)
*   **L208 (Method `test_get_joint_dist_with_log_prob_media_only`):** `tf.einsum(...)` (TensorFlow)
*   **L212 (Method `test_get_joint_dist_with_log_prob_media_only`):** `tfp.distributions.Normal(...)` (TensorFlow Probability)
*   **L216 (Method `test_get_joint_dist_with_log_prob_media_only`):** `self.assertAllClose` (TensorFlow)
*   **L221 (Method `test_get_joint_dist_with_log_prob_media_only`):** `self.assertAllClose` (TensorFlow)
*   **L229 (Method `test_get_joint_dist_with_log_prob_media_only`):** `self.assertAllClose` (TensorFlow)
*   **L245 (Method `test_get_joint_dist_with_log_prob_rf_only`):** `self.assertAllClose` (TensorFlow)
*   **L289 (Method `test_get_joint_dist_with_log_prob_rf_only`):** `self.assertAllClose` (TensorFlow)
*   **L312 (Method `test_get_joint_dist_with_log_prob_rf_only`):** `tf.einsum(...)` (TensorFlow)
*   **L317 (Method `test_get_joint_dist_with_log_prob_rf_only`):** `tf.einsum(...)` (TensorFlow)
*   **L321 (Method `test_get_joint_dist_with_log_prob_rf_only`):** `tfp.distributions.Normal(...)` (TensorFlow Probability)
*   **L325 (Method `test_get_joint_dist_with_log_prob_rf_only`):** `self.assertAllClose` (TensorFlow)
*   **L330 (Method `test_get_joint_dist_with_log_prob_rf_only`):** `self.assertAllClose` (TensorFlow)
*   **L338 (Method `test_get_joint_dist_with_log_prob_rf_only`):** `self.assertAllClose` (TensorFlow)
*   **L354 (Method `test_get_joint_dist_with_log_prob_media_and_rf`):** `self.assertAllClose` (TensorFlow)
*   **L402 (Method `test_get_joint_dist_with_log_prob_media_and_rf`):** `self.assertAllClose` (TensorFlow)
*   **L425 (Method `test_get_joint_dist_with_log_prob_media_and_rf`):** `tf.concat(...)` (TensorFlow)
*   **L429 (Method `test_get_joint_dist_with_log_prob_media_and_rf`):** `tf.concat(...)` (TensorFlow)
*   **L434 (Method `test_get_joint_dist_with_log_prob_media_and_rf`):** `tf.einsum(...)` (TensorFlow)
*   **L439 (Method `test_get_joint_dist_with_log_prob_media_and_rf`):** `tf.einsum(...)` (TensorFlow)
*   **L443 (Method `test_get_joint_dist_with_log_prob_media_and_rf`):** `tfp.distributions.Normal(...)` (TensorFlow Probability)
*   **L447 (Method `test_get_joint_dist_with_log_prob_media_and_rf`):** `self.assertAllClose` (TensorFlow)
*   **L452 (Method `test_get_joint_dist_with_log_prob_media_and_rf`):** `self.assertAllClose` (TensorFlow)
*   **L460 (Method `test_get_joint_dist_with_log_prob_media_and_rf`):** `self.assertAllClose` (TensorFlow)
*   **L471 (Method `test_sample_posterior_media_and_rf_returns_correct_shape`):** `tf.bool` (TensorFlow Type Hint)
*   **L475 (Method `test_sample_posterior_media_and_rf_returns_correct_shape`):** `tf.bool` (TensorFlow Type Hint)
*   **L478 (Method `test_sample_posterior_media_and_rf_returns_correct_shape`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L525 (Method `test_sample_posterior_media_and_rf_returns_correct_shape`):** `meridian.inference_data.sample_stats` might involve TF tensors internally.
*   **L536 (Method `test_sample_posterior_media_and_rf_returns_correct_shape`):** `meridian.inference_data.trace` might involve TF tensors internally.
*   **L551 (Method `test_sample_posterior_media_only_returns_correct_shape`):** `tf.bool` (TensorFlow Type Hint)
*   **L554 (Method `test_sample_posterior_media_only_returns_correct_shape`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L591 (Method `test_sample_posterior_media_only_returns_correct_shape`):** `meridian.inference_data.sample_stats` might involve TF tensors internally.
*   **L602 (Method `test_sample_posterior_media_only_returns_correct_shape`):** `meridian.inference_data.trace` might involve TF tensors internally.
*   **L618 (Method `test_sample_posterior_rf_only_returns_correct_shape`):** `tf.bool` (TensorFlow Type Hint)
*   **L621 (Method `test_sample_posterior_rf_only_returns_correct_shape`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L658 (Method `test_sample_posterior_rf_only_returns_correct_shape`):** `meridian.inference_data.sample_stats` might involve TF tensors internally.
*   **L669 (Method `test_sample_posterior_rf_only_returns_correct_shape`):** `meridian.inference_data.trace` might involve TF tensors internally.
*   **L693 (Method `test_sample_posterior_media_and_rf_sequential_returns_correct_shape`):** `tf.bool` (TensorFlow Type Hint)
*   **L697 (Method `test_sample_posterior_media_and_rf_sequential_returns_correct_shape`):** `tf.bool` (TensorFlow Type Hint)
*   **L700 (Method `test_sample_posterior_media_and_rf_sequential_returns_correct_shape`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L748 (Method `test_sample_posterior_media_and_rf_sequential_returns_correct_shape`):** `meridian.inference_data.sample_stats` might involve TF tensors internally.
*   **L759 (Method `test_sample_posterior_media_and_rf_sequential_returns_correct_shape`):** `meridian.inference_data.trace` might involve TF tensors internally.
*   **L775 (Method `test_sample_posterior_raises_oom_error_when_limits_exceeded`):** `side_effect=tf.errors.ResourceExhaustedError(...)` (TensorFlow)
*   **L807 (Method `test_injected_sample_posterior_media_and_rf_returns_correct_shape`):** `tf.bool` (TensorFlow Type Hint)
*   **L811 (Method `test_injected_sample_posterior_media_and_rf_returns_correct_shape`):** `tf.bool` (TensorFlow Type Hint)
*   **L840 (Method `test_injected_sample_posterior_media_only_returns_correct_shape`):** `tf.bool` (TensorFlow Type Hint)
*   **L868 (Method `test_validate_injected_inference_data_posterior_incorrect_coordinates`):** `tf.zeros(mismatched_posteriors[posterior])` (TensorFlow)
*   **L976 (Method `test_sample_posterior_with_seed`):** `seed = tfp.random.sanitize_seed(seed) if seed is not None else None` (TensorFlow Probability)
*   **L1006 (Method `test_sample_posterior_with_invalid_seed_sequence`):** `ValueError` (Built-in, but relates to TFP seed handling)

**`meridian/model/posterior_sampler.py`**

*   **L25 (Module):** `import tensorflow as tf` (TensorFlow)
*   **L26 (Module):** `import tensorflow_probability as tfp` (TensorFlow Probability)
*   **L49 (Function `_get_tau_g`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L51 (Function `_get_tau_g`):** `tfp.distributions.Distribution` (TensorFlow Probability Type Hint)
*   **L60 (Function `_get_tau_g`):** `shape = tau_g_excl_baseline.shape[:-1] + [1] if rank != 1 else 1` (TensorFlow)
*   **L61 (Function `_get_tau_g`):** `tau_g = tf.concat([... tf.zeros(...) ...], axis=rank - 1)` (TensorFlow)
*   **L67 (Function `_get_tau_g`):** `return tfp.distributions.Deterministic(tau_g, name="tau_g")` (TensorFlow Probability)
*   **L70 (Function `_xla_windowed_adaptive_nuts`):** `tf.function(autograph=False, jit_compile=True)` (TensorFlow)
*   **L72 (Function `_xla_windowed_adaptive_nuts`):** `return tfp.experimental.mcmc.windowed_adaptive_nuts(**kwargs)` (TensorFlow Probability)
*   **L84 (Method `_get_joint_dist_unpinned`):** `tfp.distributions.Distribution` (TensorFlow Probability Type Hint)
*   **L98 (Method `_get_joint_dist_unpinned`):** `tfp.distributions.JointDistributionCoroutineAutoBatched` (TensorFlow Probability)
*   **L100 (Method `_get_joint_dist_unpinned`):** `yield prior_broadcast.knot_values` (TensorFlow Probability)
*   **L101 (Method `_get_joint_dist_unpinned`):** `yield prior_broadcast.gamma_c` (TensorFlow Probability)
*   **L102 (Method `_get_joint_dist_unpinned`):** `yield prior_broadcast.xi_c` (TensorFlow Probability)
*   **L103 (Method `_get_joint_dist_unpinned`):** `yield prior_broadcast.sigma` (TensorFlow Probability)
*   **L105 (Method `_get_joint_dist_unpinned`):** `yield tfp.distributions.Sample(...)` (TensorFlow Probability)
*   **L111 (Method `_get_joint_dist_unpinned`):** `yield _get_tau_g(...)` calls TFP distributions internally (TensorFlow Probability)
*   **L114 (Method `_get_joint_dist_unpinned`):** `yield tfp.distributions.Deterministic(...)` (TensorFlow Probability)
*   **L115 (Method `_get_joint_dist_unpinned`):** `tf.einsum(...)` (TensorFlow)
*   **L116 (Method `_get_joint_dist_unpinned`):** `tf.convert_to_tensor(...)` (TensorFlow)
*   **L121 (Method `_get_joint_dist_unpinned`):** `tau_gt = tau_g[:, tf.newaxis] + mu_t` (TensorFlow)
*   **L122 (Method `_get_joint_dist_unpinned`):** `combined_media_transformed = tf.zeros(...)` (TensorFlow)
*   **L125 (Method `_get_joint_dist_unpinned`):** `combined_beta = tf.zeros(...)` (TensorFlow)
*   **L128 (Method `_get_joint_dist_unpinned`):** `yield prior_broadcast.alpha_m` (TensorFlow Probability)
*   **L129 (Method `_get_joint_dist_unpinned`):** `yield prior_broadcast.ec_m` (TensorFlow Probability)
*   **L130 (Method `_get_joint_dist_unpinned`):** `yield prior_broadcast.eta_m` (TensorFlow Probability)
*   **L131 (Method `_get_joint_dist_unpinned`):** `yield prior_broadcast.slope_m` (TensorFlow Probability)
*   **L132 (Method `_get_joint_dist_unpinned`):** `yield tfp.distributions.Sample(tfp.distributions.Normal(0, 1), ...)` (TensorFlow Probability)
*   **L148 (Method `_get_joint_dist_unpinned`):** `yield prior_broadcast.roi_m` (TensorFlow Probability)
*   **L150 (Method `_get_joint_dist_unpinned`):** `yield prior_broadcast.mroi_m` (TensorFlow Probability)
*   **L159 (Method `_get_joint_dist_unpinned`):** `yield tfp.distributions.Deterministic(...)` (TensorFlow Probability)
*   **L162 (Method `_get_joint_dist_unpinned`):** `yield prior_broadcast.beta_m` (TensorFlow Probability)
*   **L164 (Method `_get_joint_dist_unpinned`):** `beta_eta_combined = beta_m + eta_m * beta_gm_dev` (TensorFlow)
*   **L168 (Method `_get_joint_dist_unpinned`):** `else tf.math.exp(beta_eta_combined)` (TensorFlow)
*   **L170 (Method `_get_joint_dist_unpinned`):** `yield tfp.distributions.Deterministic(...)` (TensorFlow Probability)
*   **L172 (Method `_get_joint_dist_unpinned`):** `combined_media_transformed = tf.concat(...)` (TensorFlow)
*   **L175 (Method `_get_joint_dist_unpinned`):** `combined_beta = tf.concat(...)` (TensorFlow)
*   **L178 (Method `_get_joint_dist_unpinned`):** `yield prior_broadcast.alpha_rf` (TensorFlow Probability)
*   **L179 (Method `_get_joint_dist_unpinned`):** `yield prior_broadcast.ec_rf` (TensorFlow Probability)
*   **L180 (Method `_get_joint_dist_unpinned`):** `yield prior_broadcast.eta_rf` (TensorFlow Probability)
*   **L181 (Method `_get_joint_dist_unpinned`):** `yield prior_broadcast.slope_rf` (TensorFlow Probability)
*   **L182 (Method `_get_joint_dist_unpinned`):** `yield tfp.distributions.Sample(tfp.distributions.Normal(0, 1), ...)` (TensorFlow Probability)
*   **L201 (Method `_get_joint_dist_unpinned`):** `yield prior_broadcast.roi_rf` (TensorFlow Probability)
*   **L203 (Method `_get_joint_dist_unpinned`):** `yield prior_broadcast.mroi_rf` (TensorFlow Probability)
*   **L212 (Method `_get_joint_dist_unpinned`):** `yield tfp.distributions.Deterministic(...)` (TensorFlow Probability)
*   **L218 (Method `_get_joint_dist_unpinned`):** `yield prior_broadcast.beta_rf` (TensorFlow Probability)
*   **L220 (Method `_get_joint_dist_unpinned`):** `beta_eta_combined = beta_rf + eta_rf * beta_grf_dev` (TensorFlow)
*   **L224 (Method `_get_joint_dist_unpinned`):** `else tf.math.exp(beta_eta_combined)` (TensorFlow)
*   **L226 (Method `_get_joint_dist_unpinned`):** `yield tfp.distributions.Deterministic(...)` (TensorFlow Probability)
*   **L228 (Method `_get_joint_dist_unpinned`):** `combined_media_transformed = tf.concat(...)` (TensorFlow)
*   **L231 (Method `_get_joint_dist_unpinned`):** `combined_beta = tf.concat(...)` (TensorFlow)
*   **L234 (Method `_get_joint_dist_unpinned`):** `yield prior_broadcast.alpha_om` (TensorFlow Probability)
*   **L235 (Method `_get_joint_dist_unpinned`):** `yield prior_broadcast.ec_om` (TensorFlow Probability)
*   **L236 (Method `_get_joint_dist_unpinned`):** `yield prior_broadcast.eta_om` (TensorFlow Probability)
*   **L237 (Method `_get_joint_dist_unpinned`):** `yield prior_broadcast.slope_om` (TensorFlow Probability)
*   **L238 (Method `_get_joint_dist_unpinned`):** `yield tfp.distributions.Sample(tfp.distributions.Normal(0, 1), ...)` (TensorFlow Probability)
*   **L247 (Method `_get_joint_dist_unpinned`):** `yield prior_broadcast.beta_om` (TensorFlow Probability)
*   **L249 (Method `_get_joint_dist_unpinned`):** `beta_eta_combined = beta_om + eta_om * beta_gom_dev` (TensorFlow)
*   **L253 (Method `_get_joint_dist_unpinned`):** `else tf.math.exp(beta_eta_combined)` (TensorFlow)
*   **L255 (Method `_get_joint_dist_unpinned`):** `yield tfp.distributions.Deterministic(...)` (TensorFlow Probability)
*   **L257 (Method `_get_joint_dist_unpinned`):** `combined_media_transformed = tf.concat(...)` (TensorFlow)
*   **L260 (Method `_get_joint_dist_unpinned`):** `combined_beta = tf.concat(...)` (TensorFlow)
*   **L263 (Method `_get_joint_dist_unpinned`):** `yield prior_broadcast.alpha_orf` (TensorFlow Probability)
*   **L264 (Method `_get_joint_dist_unpinned`):** `yield prior_broadcast.ec_orf` (TensorFlow Probability)
*   **L265 (Method `_get_joint_dist_unpinned`):** `yield prior_broadcast.eta_orf` (TensorFlow Probability)
*   **L266 (Method `_get_joint_dist_unpinned`):** `yield prior_broadcast.slope_orf` (TensorFlow Probability)
*   **L267 (Method `_get_joint_dist_unpinned`):** `yield tfp.distributions.Sample(tfp.distributions.Normal(0, 1), ...)` (TensorFlow Probability)
*   **L276 (Method `_get_joint_dist_unpinned`):** `yield prior_broadcast.beta_orf` (TensorFlow Probability)
*   **L278 (Method `_get_joint_dist_unpinned`):** `beta_eta_combined = beta_orf + eta_orf * beta_gorf_dev` (TensorFlow)
*   **L282 (Method `_get_joint_dist_unpinned`):** `else tf.math.exp(beta_eta_combined)` (TensorFlow)
*   **L284 (Method `_get_joint_dist_unpinned`):** `yield tfp.distributions.Deterministic(...)` (TensorFlow Probability)
*   **L286 (Method `_get_joint_dist_unpinned`):** `combined_media_transformed = tf.concat(...)` (TensorFlow)
*   **L289 (Method `_get_joint_dist_unpinned`):** `combined_beta = tf.concat(...)` (TensorFlow)
*   **L291 (Method `_get_joint_dist_unpinned`):** `sigma_gt = tf.transpose(tf.broadcast_to(sigma, [n_times, n_geos]))` (TensorFlow)
*   **L292 (Method `_get_joint_dist_unpinned`):** `yield tfp.distributions.Sample(tfp.distributions.Normal(0, 1), ...)` (TensorFlow Probability)
*   **L297 (Method `_get_joint_dist_unpinned`):** `yield tfp.distributions.Deterministic(...)` (TensorFlow Probability)
*   **L301 (Method `_get_joint_dist_unpinned`):** `tf.einsum(...)` (TensorFlow)
*   **L306 (Method `_get_joint_dist_unpinned`):** `tf.einsum(...)` (TensorFlow)
*   **L309 (Method `_get_joint_dist_unpinned`):** `yield prior_broadcast.gamma_n` (TensorFlow Probability)
*   **L310 (Method `_get_joint_dist_unpinned`):** `yield prior_broadcast.xi_n` (TensorFlow Probability)
*   **L311 (Method `_get_joint_dist_unpinned`):** `yield tfp.distributions.Sample(tfp.distributions.Normal(0, 1), ...)` (TensorFlow Probability)
*   **L316 (Method `_get_joint_dist_unpinned`):** `yield tfp.distributions.Deterministic(...)` (TensorFlow Probability)
*   **L320 (Method `_get_joint_dist_unpinned`):** `y_pred = y_pred_combined_media + tf.einsum("gtn,gn->gt", non_media_treatments_scaled, gamma_gn)` (TensorFlow)
*   **L328 (Method `_get_joint_dist_unpinned`):** `y_pred_holdout = tf.where(holdout_id, 0.0, y_pred)` (TensorFlow)
*   **L329 (Method `_get_joint_dist_unpinned`):** `test_sd = tf.cast(1.0 / np.sqrt(2.0 * np.pi), tf.float32)` (TensorFlow)
*   **L330 (Method `_get_joint_dist_unpinned`):** `sigma_gt_holdout = tf.where(holdout_id, test_sd, sigma_gt)` (TensorFlow)
*   **L331 (Method `_get_joint_dist_unpinned`):** `yield tfp.distributions.Normal(y_pred_holdout, sigma_gt_holdout, name="y")` (TensorFlow Probability)
*   **L334 (Method `_get_joint_dist_unpinned`):** `yield tfp.distributions.Normal(y_pred, sigma_gt, name="y")` (TensorFlow Probability)
*   **L339 (Method `_get_joint_dist`):** `tfp.distributions.Distribution` (TensorFlow Probability Type Hint)
*   **L343 (Method `_get_joint_dist`):** `y = tf.where(mmm.holdout_id, 0.0, mmm.kpi_scaled) if mmm.holdout_id is not None else mmm.kpi_scaled` (TensorFlow)
*   **L351 (Method `__call__`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L352 (Method `__call__`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L383 (Method `__call__`):** `seed = tfp.random.sanitize_seed(seed) if seed is not None else None` (TensorFlow Probability)
*   **L390 (Method `__call__`):** `except tf.errors.ResourceExhaustedError as error:` (TensorFlow)
*   **L401 (Method `__call__`):** `k: tf.einsum("ij...->ji...", tf.concat([state[k] for state in states], axis=1)[n_burnin:, ...])` (TensorFlow)
*   **L416 (Method `__call__`):** `v = tf.concat([... tf.broadcast_to(tf.transpose(trace[k][n_burnin:, ...]), ...) ...], axis=0)` (TensorFlow)
*   **L436 (Method `__call__`):** `sample_stats[constants.STEP_SIZE] = tf.broadcast_to(...)` (TensorFlow)

**`meridian/model/prior_distribution_test.py`**

*   **L21 (Module):** `import tensorflow_probability as tfp` (TensorFlow Probability)
*   **L46 (Method `setUp`):** `tfp.distributions.Normal(0.0, 5.0, name=c.KNOT_VALUES)` (TensorFlow Probability)
*   **L47 (Method `setUp`):** `tfp.distributions.Normal(0.0, 5.0, name=c.TAU_G_EXCL_BASELINE)` (TensorFlow Probability)
*   **L50 (Method `setUp`):** `tfp.distributions.HalfNormal(5.0, name=c.BETA_M)` (TensorFlow Probability)
*   **L51 (Method `setUp`):** `tfp.distributions.HalfNormal(5.0, name=c.BETA_RF)` (TensorFlow Probability)
*   **L52 (Method `setUp`):** `tfp.distributions.HalfNormal(5.0, name=c.BETA_OM)` (TensorFlow Probability)
*   **L53 (Method `setUp`):** `tfp.distributions.HalfNormal(5.0, name=c.BETA_ORF)` (TensorFlow Probability)
*   **L54 (Method `setUp`):** `tfp.distributions.HalfNormal(1.0, name=c.ETA_M)` (TensorFlow Probability)
*   **L55 (Method `setUp`):** `tfp.distributions.HalfNormal(1.0, name=c.ETA_RF)` (TensorFlow Probability)
*   **L56 (Method `setUp`):** `tfp.distributions.HalfNormal(1.0, name=c.ETA_OM)` (TensorFlow Probability)
*   **L57 (Method `setUp`):** `tfp.distributions.HalfNormal(1.0, name=c.ETA_ORF)` (TensorFlow Probability)
*   **L58 (Method `setUp`):** `tfp.distributions.Normal(0.0, 5.0, name=c.GAMMA_C)` (TensorFlow Probability)
*   **L59 (Method `setUp`):** `tfp.distributions.Normal(0.0, 5.0, name=c.GAMMA_N)` (TensorFlow Probability)
*   **L60 (Method `setUp`):** `tfp.distributions.HalfNormal(5.0, name=c.XI_C)` (TensorFlow Probability)
*   **L61 (Method `setUp`):** `tfp.distributions.HalfNormal(5.0, name=c.XI_N)` (TensorFlow Probability)
*   **L62 (Method `setUp`):** `tfp.distributions.Uniform(0.0, 1.0, name=c.ALPHA_M)` (TensorFlow Probability)
*   **L63 (Method `setUp`):** `tfp.distributions.Uniform(0.0, 1.0, name=c.ALPHA_RF)` (TensorFlow Probability)
*   **L64 (Method `setUp`):** `tfp.distributions.Uniform(0.0, 1.0, name=c.ALPHA_OM)` (TensorFlow Probability)
*   **L65 (Method `setUp`):** `tfp.distributions.Uniform(0.0, 1.0, name=c.ALPHA_ORF)` (TensorFlow Probability)
*   **L66 (Method `setUp`):** `tfp.distributions.TruncatedNormal(0.8, 0.8, 0.1, 10, name=c.EC_M)` (TensorFlow Probability)
*   **L69 (Method `setUp`):** `tfp.distributions.TransformedDistribution(tfp.distributions.LogNormal(0.7, 0.4), tfp.bijectors.Shift(0.1), name=c.EC_RF)` (TensorFlow Probability)
*   **L74 (Method `setUp`):** `tfp.distributions.TruncatedNormal(0.8, 0.8, 0.1, 10, name=c.EC_OM)` (TensorFlow Probability)
*   **L77 (Method `setUp`):** `tfp.distributions.TransformedDistribution(tfp.distributions.LogNormal(0.7, 0.4), tfp.bijectors.Shift(0.1), name=c.EC_ORF)` (TensorFlow Probability)
*   **L82 (Method `setUp`):** `tfp.distributions.Deterministic(1.0, name=c.SLOPE_M)` (TensorFlow Probability)
*   **L83 (Method `setUp`):** `tfp.distributions.LogNormal(0.7, 0.4, name=c.SLOPE_RF)` (TensorFlow Probability)
*   **L84 (Method `setUp`):** `tfp.distributions.Deterministic(1.0, name=c.SLOPE_OM)` (TensorFlow Probability)
*   **L85 (Method `setUp`):** `tfp.distributions.LogNormal(0.7, 0.4, name=c.SLOPE_ORF)` (TensorFlow Probability)
*   **L86 (Method `setUp`):** `tfp.distributions.HalfNormal(5.0, name=c.SIGMA)` (TensorFlow Probability)
*   **L87 (Method `setUp`):** `tfp.distributions.LogNormal(0.2, 0.9, name=c.ROI_M)` (TensorFlow Probability)
*   **L88 (Method `setUp`):** `tfp.distributions.LogNormal(0.2, 0.9, name=c.ROI_RF)` (TensorFlow Probability)
*   **L89 (Method `setUp`):** `tfp.distributions.LogNormal(0.0, 0.5, name=c.MROI_M)` (TensorFlow Probability)
*   **L90 (Method `setUp`):** `tfp.distributions.LogNormal(0.0, 0.5, name=c.MROI_RF)` (TensorFlow Probability)
*   **L107 (Method `assert_distribution_params_are_equal`):** `tfp.distributions.Distribution` (TensorFlow Probability Type Hint)
*   **L108 (Method `assert_distribution_params_are_equal`):** `tfp.distributions.Distribution` (TensorFlow Probability Type Hint)
*   **L113 (Method `assert_distribution_params_are_equal`):** `tfp.distributions.Distribution` (TensorFlow Probability Type Hint)
*   **L117 (Method `assert_distribution_params_are_equal`):** `tfp.distributions.Distribution` (TensorFlow Probability Type Hint)
*   **L199 (Method `test_has_deterministic_param_broadcasted_distribution_correct`):** `isinstance(..., tfp.distributions.Deterministic)` (TensorFlow Probability)
*   **L378 (Method `test_setstate_correct`):** `isinstance(..., tfp.distributions.Deterministic)` (TensorFlow Probability)
*   **L387 (Method `test_get_total_media_contribution_prior`):** `tfp.distributions.Distribution` (TensorFlow Probability Type Hint)
*   **L391 (Method `test_get_total_media_contribution_prior`):** `lognormal_sigma = tf.cast(...)` (TensorFlow)
*   **L394 (Method `test_get_total_media_contribution_prior`):** `lognormal_mu = tf.cast(...)` (TensorFlow)
*   **L397 (Method `test_get_total_media_contribution_prior`):** `return tfp.distributions.LogNormal(...)` (TensorFlow Probability)
*   **L405 (Method `test_check_for_negative_effect`):** `tfp.distributions.Distribution` (TensorFlow Probability Type Hint)
*   **L420 (Method `test_distributions_are_equal`):** `tfp.distributions.Distribution` (TensorFlow Probability Type Hint)
*   **L421 (Method `test_distributions_are_equal`):** `tfp.distributions.Distribution` (TensorFlow Probability Type Hint)
*   **L436 (Method `test_distributions_are_equal`):** `tfp.distributions.Deterministic(...)` (TensorFlow Probability)
*   **L437 (Method `test_distributions_are_equal`):** `tfp.distributions.Deterministic(...)` (TensorFlow Probability)
*   **L441 (Method `test_distributions_are_equal`):** `tfp.distributions.Deterministic(...)` (TensorFlow Probability)
*   **L442 (Method `test_distributions_are_equal`):** `tfp.distributions.Deterministic(...)` (TensorFlow Probability)
*   **L446 (Method `test_distributions_are_equal`):** `tfp.distributions.LogNormal(...)` (TensorFlow Probability)
*   **L447 (Method `test_distributions_are_equal`):** `tfp.distributions.LogNormal(...)` (TensorFlow Probability)
*   **L451 (Method `test_distributions_are_equal`):** `tfp.distributions.TransformedDistribution(tfp.distributions.LogNormal(...), tfp.bijectors.Shift(...))` (TensorFlow Probability)
*   **L456 (Method `test_distributions_are_equal`):** `tfp.distributions.TransformedDistribution(tfp.distributions.LogNormal(...), tfp.bijectors.Shift(...))` (TensorFlow Probability)
*   **L466 (Method `test_distributions_are_equal`):** `tfp.distributions.BatchBroadcast(tfp.distributions.HalfNormal(...), ...)` (TensorFlow Probability)
*   **L469 (Method `test_distributions_are_equal`):** `tfp.distributions.BatchBroadcast(tfp.distributions.HalfNormal(...), ...)` (TensorFlow Probability)
*   **L475 (Method `test_distributions_are_equal`):** `tfp.distributions.BatchBroadcast(tfp.distributions.HalfNormal(...), ...)` (TensorFlow Probability)
*   **L478 (Method `test_distributions_are_equal`):** `tfp.distributions.BatchBroadcast(tfp.distributions.Uniform(...), ...)` (TensorFlow Probability)
*   **L484 (Method `test_distributions_are_equal`):** `tfp.distributions.HalfNormal(...)` (TensorFlow Probability)
*   **L485 (Method `test_distributions_are_equal`):** `tfp.distributions.BatchBroadcast(tfp.distributions.HalfNormal(...), ...)` (TensorFlow Probability)
*   **L491 (Method `test_distributions_are_equal`):** `tfp.distributions.BatchBroadcast(tfp.distributions.HalfNormal(...), ...)` (TensorFlow Probability)
*   **L494 (Method `test_distributions_are_equal`):** `tfp.distributions.HalfNormal(...)` (TensorFlow Probability)

**`meridian/model/prior_distribution.py`**

*   **L23 (Module):** `import tensorflow as tf` (TensorFlow)
*   **L24 (Module):** `import tensorflow_probability as tfp` (TensorFlow Probability)
*   **L76 (Class `PriorDistribution`):** `tfp.distributions.Distribution` (TensorFlow Probability Type Hint)
*   **L77 (Class `PriorDistribution`):** `tfp.distributions.Normal(0.0, 5.0, name=constants.KNOT_VALUES)` (TensorFlow Probability)
*   **L80 (Class `PriorDistribution`):** `tfp.distributions.Distribution` (TensorFlow Probability Type Hint)
*   **L81 (Class `PriorDistribution`):** `tfp.distributions.Normal(0.0, 5.0, name=constants.TAU_G_EXCL_BASELINE)` (TensorFlow Probability)
*   **L84 (Class `PriorDistribution`):** `tfp.distributions.Distribution` (TensorFlow Probability Type Hint)
*   **L85 (Class `PriorDistribution`):** `tfp.distributions.HalfNormal(5.0, name=constants.BETA_M)` (TensorFlow Probability)
*   **L88 (Class `PriorDistribution`):** `tfp.distributions.Distribution` (TensorFlow Probability Type Hint)
*   **L89 (Class `PriorDistribution`):** `tfp.distributions.HalfNormal(5.0, name=constants.BETA_RF)` (TensorFlow Probability)
*   **L92 (Class `PriorDistribution`):** `tfp.distributions.Distribution` (TensorFlow Probability Type Hint)
*   **L93 (Class `PriorDistribution`):** `tfp.distributions.HalfNormal(5.0, name=constants.BETA_OM)` (TensorFlow Probability)
*   **L96 (Class `PriorDistribution`):** `tfp.distributions.Distribution` (TensorFlow Probability Type Hint)
*   **L97 (Class `PriorDistribution`):** `tfp.distributions.HalfNormal(5.0, name=constants.BETA_ORF)` (TensorFlow Probability)
*   **L100 (Class `PriorDistribution`):** `tfp.distributions.Distribution` (TensorFlow Probability Type Hint)
*   **L101 (Class `PriorDistribution`):** `tfp.distributions.HalfNormal(1.0, name=constants.ETA_M)` (TensorFlow Probability)
*   **L104 (Class `PriorDistribution`):** `tfp.distributions.Distribution` (TensorFlow Probability Type Hint)
*   **L105 (Class `PriorDistribution`):** `tfp.distributions.HalfNormal(1.0, name=constants.ETA_RF)` (TensorFlow Probability)
*   **L108 (Class `PriorDistribution`):** `tfp.distributions.Distribution` (TensorFlow Probability Type Hint)
*   **L109 (Class `PriorDistribution`):** `tfp.distributions.HalfNormal(1.0, name=constants.ETA_OM)` (TensorFlow Probability)
*   **L112 (Class `PriorDistribution`):** `tfp.distributions.Distribution` (TensorFlow Probability Type Hint)
*   **L113 (Class `PriorDistribution`):** `tfp.distributions.HalfNormal(1.0, name=constants.ETA_ORF)` (TensorFlow Probability)
*   **L116 (Class `PriorDistribution`):** `tfp.distributions.Distribution` (TensorFlow Probability Type Hint)
*   **L117 (Class `PriorDistribution`):** `tfp.distributions.Normal(0.0, 5.0, name=constants.GAMMA_C)` (TensorFlow Probability)
*   **L120 (Class `PriorDistribution`):** `tfp.distributions.Distribution` (TensorFlow Probability Type Hint)
*   **L121 (Class `PriorDistribution`):** `tfp.distributions.Normal(0.0, 5.0, name=constants.GAMMA_N)` (TensorFlow Probability)
*   **L124 (Class `PriorDistribution`):** `tfp.distributions.Distribution` (TensorFlow Probability Type Hint)
*   **L125 (Class `PriorDistribution`):** `tfp.distributions.HalfNormal(5.0, name=constants.XI_C)` (TensorFlow Probability)
*   **L128 (Class `PriorDistribution`):** `tfp.distributions.Distribution` (TensorFlow Probability Type Hint)
*   **L129 (Class `PriorDistribution`):** `tfp.distributions.HalfNormal(5.0, name=constants.XI_N)` (TensorFlow Probability)
*   **L132 (Class `PriorDistribution`):** `tfp.distributions.Distribution` (TensorFlow Probability Type Hint)
*   **L133 (Class `PriorDistribution`):** `tfp.distributions.Uniform(0.0, 1.0, name=constants.ALPHA_M)` (TensorFlow Probability)
*   **L136 (Class `PriorDistribution`):** `tfp.distributions.Distribution` (TensorFlow Probability Type Hint)
*   **L137 (Class `PriorDistribution`):** `tfp.distributions.Uniform(0.0, 1.0, name=constants.ALPHA_RF)` (TensorFlow Probability)
*   **L140 (Class `PriorDistribution`):** `tfp.distributions.Distribution` (TensorFlow Probability Type Hint)
*   **L141 (Class `PriorDistribution`):** `tfp.distributions.Uniform(0.0, 1.0, name=constants.ALPHA_OM)` (TensorFlow Probability)
*   **L144 (Class `PriorDistribution`):** `tfp.distributions.Distribution` (TensorFlow Probability Type Hint)
*   **L145 (Class `PriorDistribution`):** `tfp.distributions.Uniform(0.0, 1.0, name=constants.ALPHA_ORF)` (TensorFlow Probability)
*   **L148 (Class `PriorDistribution`):** `tfp.distributions.Distribution` (TensorFlow Probability Type Hint)
*   **L149 (Class `PriorDistribution`):** `tfp.distributions.TruncatedNormal(0.8, 0.8, 0.1, 10, name=constants.EC_M)` (TensorFlow Probability)
*   **L152 (Class `PriorDistribution`):** `tfp.distributions.Distribution` (TensorFlow Probability Type Hint)
*   **L153 (Class `PriorDistribution`):** `tfp.distributions.TransformedDistribution(tfp.distributions.LogNormal(0.7, 0.4), tfp.bijectors.Shift(0.1), name=constants.EC_RF)` (TensorFlow Probability)
*   **L158 (Class `PriorDistribution`):** `tfp.distributions.Distribution` (TensorFlow Probability Type Hint)
*   **L159 (Class `PriorDistribution`):** `tfp.distributions.TruncatedNormal(0.8, 0.8, 0.1, 10, name=constants.EC_OM)` (TensorFlow Probability)
*   **L162 (Class `PriorDistribution`):** `tfp.distributions.Distribution` (TensorFlow Probability Type Hint)
*   **L163 (Class `PriorDistribution`):** `tfp.distributions.TransformedDistribution(tfp.distributions.LogNormal(0.7, 0.4), tfp.bijectors.Shift(0.1), name=constants.EC_ORF)` (TensorFlow Probability)
*   **L168 (Class `PriorDistribution`):** `tfp.distributions.Distribution` (TensorFlow Probability Type Hint)
*   **L169 (Class `PriorDistribution`):** `tfp.distributions.Deterministic(1.0, name=constants.SLOPE_M)` (TensorFlow Probability)
*   **L172 (Class `PriorDistribution`):** `tfp.distributions.Distribution` (TensorFlow Probability Type Hint)
*   **L173 (Class `PriorDistribution`):** `tfp.distributions.LogNormal(0.7, 0.4, name=constants.SLOPE_RF)` (TensorFlow Probability)
*   **L176 (Class `PriorDistribution`):** `tfp.distributions.Distribution` (TensorFlow Probability Type Hint)
*   **L177 (Class `PriorDistribution`):** `tfp.distributions.Deterministic(1.0, name=constants.SLOPE_OM)` (TensorFlow Probability)
*   **L180 (Class `PriorDistribution`):** `tfp.distributions.Distribution` (TensorFlow Probability Type Hint)
*   **L181 (Class `PriorDistribution`):** `tfp.distributions.LogNormal(0.7, 0.4, name=constants.SLOPE_ORF)` (TensorFlow Probability)
*   **L184 (Class `PriorDistribution`):** `tfp.distributions.Distribution` (TensorFlow Probability Type Hint)
*   **L185 (Class `PriorDistribution`):** `tfp.distributions.HalfNormal(5.0, name=constants.SIGMA)` (TensorFlow Probability)
*   **L188 (Class `PriorDistribution`):** `tfp.distributions.Distribution` (TensorFlow Probability Type Hint)
*   **L189 (Class `PriorDistribution`):** `tfp.distributions.LogNormal(0.2, 0.9, name=constants.ROI_M)` (TensorFlow Probability)
*   **L192 (Class `PriorDistribution`):** `tfp.distributions.Distribution` (TensorFlow Probability Type Hint)
*   **L193 (Class `PriorDistribution`):** `tfp.distributions.LogNormal(0.2, 0.9, name=constants.ROI_RF)` (TensorFlow Probability)
*   **L196 (Class `PriorDistribution`):** `tfp.distributions.Distribution` (TensorFlow Probability Type Hint)
*   **L197 (Class `PriorDistribution`):** `tfp.distributions.LogNormal(0.0, 0.5, name=constants.MROI_M)` (TensorFlow Probability)
*   **L200 (Class `PriorDistribution`):** `tfp.distributions.Distribution` (TensorFlow Probability Type Hint)
*   **L201 (Class `PriorDistribution`):** `tfp.distributions.LogNormal(0.0, 0.5, name=constants.MROI_RF)` (TensorFlow Probability)
*   **L210 (Method `__setstate__`):** `tfp.distributions.Distribution` (TensorFlow Probability Type Hint)
*   **L218 (Method `__setstate__`):** `dist_type = params.pop(constants.DISTRIBUTION_TYPE)` (TensorFlow Probability - usage related to type)
*   **L219 (Method `__setstate__`):** `return dist_type(**params)` (TensorFlow Probability - usage related to type)
*   **L231 (Method `__getstate__`):** `tfp.distributions.Distribution` (TensorFlow Probability Type Hint)
*   **L242 (Method `has_deterministic_param`):** `tfp.distributions.Distribution` (TensorFlow Probability Type Hint)
*   **L247 (Method `has_deterministic_param`):** `isinstance(..., tfp.distributions.Deterministic)` (TensorFlow Probability)
*   **L256 (Method `broadcast`):** `PriorDistribution` (TensorFlow Probability Type Hint)
*   **L312 (Method `broadcast`):** `tfp.distributions.BatchBroadcast(...)` (TensorFlow Probability)
*   **L317 (Method `broadcast`):** `tfp.distributions.BatchBroadcast(...)` (TensorFlow Probability)
*   **L322 (Method `broadcast`):** `tfp.distributions.BatchBroadcast(...)` (TensorFlow Probability)
*   **L325 (Method `broadcast`):** `tfp.distributions.BatchBroadcast(...)` (TensorFlow Probability)
*   **L328 (Method `broadcast`):** `tfp.distributions.BatchBroadcast(...)` (TensorFlow Probability)
*   **L331 (Method `broadcast`):** `tfp.distributions.BatchBroadcast(...)` (TensorFlow Probability)
*   **L342 (Method `broadcast`):** `tfp.distributions.BatchBroadcast(...)` (TensorFlow Probability)
*   **L345 (Method `broadcast`):** `tfp.distributions.BatchBroadcast(...)` (TensorFlow Probability)
*   **L349 (Method `broadcast`):** `tfp.distributions.BatchBroadcast(...)` (TensorFlow Probability)
*   **L353 (Method `broadcast`):** `tfp.distributions.BatchBroadcast(...)` (TensorFlow Probability)
*   **L356 (Method `broadcast`):** `tfp.distributions.BatchBroadcast(...)` (TensorFlow Probability)
*   **L361 (Method `broadcast`):** `tfp.distributions.BatchBroadcast(...)` (TensorFlow Probability)
*   **L364 (Method `broadcast`):** `tfp.distributions.BatchBroadcast(...)` (TensorFlow Probability)
*   **L369 (Method `broadcast`):** `tfp.distributions.BatchBroadcast(...)` (TensorFlow Probability)
*   **L372 (Method `broadcast`):** `tfp.distributions.BatchBroadcast(...)` (TensorFlow Probability)
*   **L375 (Method `broadcast`):** `tfp.distributions.BatchBroadcast(...)` (TensorFlow Probability)
*   **L378 (Method `broadcast`):** `tfp.distributions.BatchBroadcast(...)` (TensorFlow Probability)
*   **L381 (Method `broadcast`):** `tfp.distributions.BatchBroadcast(...)` (TensorFlow Probability)
*   **L384 (Method `broadcast`):** `tfp.distributions.BatchBroadcast(...)` (TensorFlow Probability)
*   **L387 (Method `broadcast`):** `tfp.distributions.BatchBroadcast(...)` (TensorFlow Probability)
*   **L390 (Method `broadcast`):** `tfp.distributions.BatchBroadcast(...)` (TensorFlow Probability)
*   **L393 (Method `broadcast`):** `tfp.distributions.BatchBroadcast(...)` (TensorFlow Probability)
*   **L396 (Method `broadcast`):** `tfp.distributions.BatchBroadcast(...)` (TensorFlow Probability)
*   **L409 (Method `broadcast`):** `tfp.distributions.BatchBroadcast(...)` (TensorFlow Probability)
*   **L412 (Method `broadcast`):** `tfp.distributions.BatchBroadcast(...)` (TensorFlow Probability)
*   **L421 (Method `broadcast`):** `tfp.distributions.BatchBroadcast(...)` (TensorFlow Probability)
*   **L424 (Method `broadcast`):** `tfp.distributions.BatchBroadcast(...)` (TensorFlow Probability)
*   **L427 (Method `broadcast`):** `tfp.distributions.BatchBroadcast(...)` (TensorFlow Probability)
*   **L430 (Method `broadcast`):** `tfp.distributions.BatchBroadcast(...)` (TensorFlow Probability)
*   **L433 (Method `broadcast`):** `tfp.distributions.BatchBroadcast(...)` (TensorFlow Probability)
*   **L436 (Method `broadcast`):** `tfp.distributions.BatchBroadcast(...)` (TensorFlow Probability)
*   **L459 (Method `broadcast`):** `tfp.distributions.BatchBroadcast(...)` (TensorFlow Probability)
*   **L462 (Method `broadcast`):** `tfp.distributions.BatchBroadcast(...)` (TensorFlow Probability)
*   **L465 (Method `broadcast`):** `tfp.distributions.BatchBroadcast(...)` (TensorFlow Probability)
*   **L468 (Method `broadcast`):** `tfp.distributions.BatchBroadcast(...)` (TensorFlow Probability)
*   **L501 (Function `_convert_to_deterministic_0_distribution`):** `tfp.distributions.Distribution` (TensorFlow Probability Type Hint)
*   **L503 (Function `_convert_to_deterministic_0_distribution`):** `tfp.distributions.Distribution` (TensorFlow Probability Type Hint)
*   **L509 (Function `_convert_to_deterministic_0_distribution`):** `isinstance(distribution, tfp.distributions.Deterministic)` (TensorFlow Probability)
*   **L515 (Function `_convert_to_deterministic_0_distribution`):** `return tfp.distributions.Deterministic(loc=0, name=distribution.name)` (TensorFlow Probability)
*   **L525 (Function `_get_total_media_contribution_prior`):** `tfp.distributions.Distribution` (TensorFlow Probability Type Hint)
*   **L537 (Function `_get_total_media_contribution_prior`):** `lognormal_sigma = tf.cast(...)` (TensorFlow)
*   **L540 (Function `_get_total_media_contribution_prior`):** `lognormal_mu = tf.cast(...)` (TensorFlow)
*   **L543 (Function `_get_total_media_contribution_prior`):** `return tfp.distributions.LogNormal(...)` (TensorFlow Probability)
*   **L547 (Function `_check_for_negative_effect`):** `tfp.distributions.Distribution` (TensorFlow Probability Type Hint)
*   **L555 (Function `distributions_are_equal`):** `tfp.distributions.Distribution` (TensorFlow Probability Type Hint)
*   **L556 (Function `distributions_are_equal`):** `tfp.distributions.Distribution` (TensorFlow Probability Type Hint)

**`meridian/model/prior_sampler.py`**

*   **L20 (Module):** `import tensorflow as tf` (TensorFlow)
*   **L21 (Module):** `import tensorflow_probability as tfp` (TensorFlow Probability)
*   **L37 (Function `_get_tau_g`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L39 (Function `_get_tau_g`):** `tfp.distributions.Distribution` (TensorFlow Probability Type Hint)
*   **L48 (Function `_get_tau_g`):** `shape = tau_g_excl_baseline.shape[:-1] + [1] if rank != 1 else 1` (TensorFlow)
*   **L49 (Function `_get_tau_g`):** `tau_g = tf.concat([... tf.zeros(...) ...], axis=rank - 1)` (TensorFlow)
*   **L55 (Function `_get_tau_g`):** `return tfp.distributions.Deterministic(tau_g, name="tau_g")` (TensorFlow Probability)
*   **L67 (Method `get_roi_prior_beta_m_value`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L68 (Method `get_roi_prior_beta_m_value`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L69 (Method `get_roi_prior_beta_m_value`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L70 (Method `get_roi_prior_beta_m_value`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L71 (Method `get_roi_prior_beta_m_value`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L72 (Method `get_roi_prior_beta_m_value`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L73 (Method `get_roi_prior_beta_m_value`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L75 (Method `get_roi_prior_beta_m_value`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L88 (Method `get_roi_prior_beta_m_value`):** `inc_revenue_m = roi_or_mroi_m * tf.reduce_sum(tf.abs(media_spend - media_spend_counterfactual), ...)` (TensorFlow)
*   **L94 (Method `get_roi_prior_beta_m_value`):** `media_counterfactual_transformed = tf.zeros_like(media_transformed)` (TensorFlow)
*   **L105 (Method `get_roi_prior_beta_m_value`):** `revenue_per_kpi = tf.ones(...)` (TensorFlow)
*   **L106 (Method `get_roi_prior_beta_m_value`):** `media_contrib_gm = tf.einsum(...)` (TensorFlow)
*   **L116 (Method `get_roi_prior_beta_m_value`):** `media_contrib_m = tf.einsum("...gm->...m", media_contrib_gm)` (TensorFlow)
*   **L117 (Method `get_roi_prior_beta_m_value`):** `random_effect_m = tf.einsum("...m,...gm,...gm->...m", eta_m, beta_gm_dev, media_contrib_gm)` (TensorFlow)
*   **L123 (Method `get_roi_prior_beta_m_value`):** `tf.math.exp(beta_gm_dev * eta_m[..., tf.newaxis, :])` (TensorFlow)
*   **L126 (Method `get_roi_prior_beta_m_value`):** `return tf.math.log(inc_revenue_m) - tf.math.log(random_effect_m)` (TensorFlow)
*   **L129 (Method `get_roi_prior_beta_rf_value`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L130 (Method `get_roi_prior_beta_rf_value`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L131 (Method `get_roi_prior_beta_rf_value`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L132 (Method `get_roi_prior_beta_rf_value`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L133 (Method `get_roi_prior_beta_rf_value`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L134 (Method `get_roi_prior_beta_rf_value`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L135 (Method `get_roi_prior_beta_rf_value`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L137 (Method `get_roi_prior_beta_rf_value`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L148 (Method `get_roi_prior_beta_rf_value`):** `inc_revenue_rf = roi_or_mroi_rf * tf.reduce_sum(...)` (TensorFlow)
*   **L156 (Method `get_roi_prior_beta_rf_value`):** `rf_counterfactual_transformed = tf.zeros_like(rf_transformed)` (TensorFlow)
*   **L165 (Method `get_roi_prior_beta_rf_value`):** `revenue_per_kpi = tf.ones(...)` (TensorFlow)
*   **L167 (Method `get_roi_prior_beta_rf_value`):** `media_contrib_grf = tf.einsum(...)` (TensorFlow)
*   **L177 (Method `get_roi_prior_beta_rf_value`):** `media_contrib_rf = tf.einsum("...gm->...m", media_contrib_grf)` (TensorFlow)
*   **L178 (Method `get_roi_prior_beta_rf_value`):** `random_effect_rf = tf.einsum("...m,...gm,...gm->...m", eta_rf, beta_grf_dev, media_contrib_grf)` (TensorFlow)
*   **L184 (Method `get_roi_prior_beta_rf_value`):** `tf.math.exp(beta_grf_dev * eta_rf[..., tf.newaxis, :])` (TensorFlow)
*   **L187 (Method `get_roi_prior_beta_rf_value`):** `return tf.math.log(inc_revenue_rf) - tf.math.log(random_effect_rf)` (TensorFlow)
*   **L194 (Method `_sample_media_priors`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L213 (Method `_sample_media_priors`):** `beta_gm_dev = tfp.distributions.Sample(tfp.distributions.Normal(0, 1), ...).sample(...)` (TensorFlow Probability)
*   **L233 (Method `_sample_media_priors`):** `media_vars[constants.BETA_M] = tfp.distributions.Deterministic(beta_m_value, ...).sample()` (TensorFlow Probability)
*   **L242 (Method `_sample_media_priors`):** `media_vars[constants.BETA_M] = tfp.distributions.Deterministic(beta_m_value, ...).sample()` (TensorFlow Probability)
*   **L248 (Method `_sample_media_priors`):** `beta_eta_combined = (...)` (TensorFlow)
*   **L254 (Method `_sample_media_priors`):** `else tf.math.exp(beta_eta_combined)` (TensorFlow)
*   **L256 (Method `_sample_media_priors`):** `media_vars[constants.BETA_GM] = tfp.distributions.Deterministic(beta_gm_value, ...).sample()` (TensorFlow Probability)
*   **L265 (Method `_sample_rf_priors`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L284 (Method `_sample_rf_priors`):** `beta_grf_dev = tfp.distributions.Sample(tfp.distributions.Normal(0, 1), ...).sample(...)` (TensorFlow Probability)
*   **L305 (Method `_sample_rf_priors`):** `rf_vars[constants.BETA_RF] = tfp.distributions.Deterministic(beta_rf_value, ...).sample()` (TensorFlow Probability)
*   **L314 (Method `_sample_rf_priors`):** `rf_vars[constants.BETA_RF] = tfp.distributions.Deterministic(beta_rf_value, ...).sample()` (TensorFlow Probability)
*   **L320 (Method `_sample_rf_priors`):** `beta_eta_combined = (...)` (TensorFlow)
*   **L326 (Method `_sample_rf_priors`):** `else tf.math.exp(beta_eta_combined)` (TensorFlow)
*   **L328 (Method `_sample_rf_priors`):** `rf_vars[constants.BETA_GRF] = tfp.distributions.Deterministic(beta_grf_value, ...).sample()` (TensorFlow Probability)
*   **L335 (Method `_sample_organic_media_priors`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L353 (Method `_sample_organic_media_priors`):** `beta_gom_dev = tfp.distributions.Sample(tfp.distributions.Normal(0, 1), ...).sample(...)` (TensorFlow Probability)
*   **L361 (Method `_sample_organic_media_priors`):** `beta_eta_combined = (...)` (TensorFlow)
*   **L367 (Method `_sample_organic_media_priors`):** `else tf.math.exp(beta_eta_combined)` (TensorFlow)
*   **L369 (Method `_sample_organic_media_priors`):** `organic_media_vars[constants.BETA_GOM] = tfp.distributions.Deterministic(beta_gom_value, ...).sample()` (TensorFlow Probability)
*   **L376 (Method `_sample_organic_rf_priors`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L394 (Method `_sample_organic_rf_priors`):** `beta_gorf_dev = tfp.distributions.Sample(tfp.distributions.Normal(0, 1), ...).sample(...)` (TensorFlow Probability)
*   **L402 (Method `_sample_organic_rf_priors`):** `beta_eta_combined = (...)` (TensorFlow)
*   **L408 (Method `_sample_organic_rf_priors`):** `else tf.math.exp(beta_eta_combined)` (TensorFlow)
*   **L410 (Method `_sample_organic_rf_priors`):** `organic_rf_vars[constants.BETA_GORF] = tfp.distributions.Deterministic(beta_gorf_value, ...).sample()` (TensorFlow Probability)
*   **L417 (Method `_sample_non_media_treatments_priors`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L434 (Method `_sample_non_media_treatments_priors`):** `gamma_gn_dev = tfp.distributions.Sample(tfp.distributions.Normal(0, 1), ...).sample(...)` (TensorFlow Probability)
*   **L439 (Method `_sample_non_media_treatments_priors`):** `non_media_treatments_vars[constants.GAMMA_GN] = tfp.distributions.Deterministic(...).sample()` (TensorFlow Probability)
*   **L447 (Method `_sample_prior`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L456 (Method `_sample_prior`):** `tf.keras.utils.set_random_seed(1)` (TensorFlow)
*   **L470 (Method `_sample_prior`):** `base_vars[constants.MU_T] = tfp.distributions.Deterministic(tf.einsum(...), ...).sample()` (TensorFlow Probability)
*   **L478 (Method `_sample_prior`):** `gamma_gc_dev = tfp.distributions.Sample(tfp.distributions.Normal(0, 1), ...).sample(...)` (TensorFlow Probability)
*   **L483 (Method `_sample_prior`):** `base_vars[constants.GAMMA_GC] = tfp.distributions.Deterministic(...).sample()` (TensorFlow Probability)
*   **L517 (Method `__call__`):** `tf.Tensor` (TensorFlow Type Hint)

**`meridian/model/spec.py`**

*   **L21 (Module):** `import tensorflow_probability as tfp` (TensorFlow Probability)
*   **L44 (Class `ModelSpec`):** `prior: prior_distribution.PriorDistribution` (Meridian type, but likely contains TFP distributions)
*   **L74 (Class `ModelSpec`):** `prior: prior_distribution.PriorDistribution = dataclasses.field(...)` (Meridian type, likely contains TFP distributions)

**`meridian/model/transformers.py`**

*   **L20 (Module):** `import tensorflow as tf` (TensorFlow)
*   **L21 (Module):** `import tensorflow_probability as tfp` (TensorFlow Probability)
*   **L33 (Method `forward`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L34 (Method `forward`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L35 (Method `forward`):** `tf.function(jit_compile=True)` (TensorFlow)
*   **L40 (Method `inverse`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L41 (Method `inverse`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L42 (Method `inverse`):** `tf.function(jit_compile=True)` (TensorFlow)
*   **L54 (Method `__init__`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L55 (Method `__init__`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L63 (Method `__init__`):** `population_scaled_media = tf.math.divide_no_nan(media, population[:, tf.newaxis, tf.newaxis])` (TensorFlow)
*   **L66 (Method `__init__`):** `population_scaled_media_nan = tf.where(population_scaled_media == 0, np.nan, population_scaled_media)` (TensorFlow)
*   **L70 (Method `__init__`):** `self._population_scaled_median_m = tf.numpy_function(...)` (TensorFlow)
*   **L75 (Method `__init__`):** `self._scale_factors_gm = tf.einsum("g,m->gm", population, self._population_scaled_median_m)` (TensorFlow)
*   **L81 (Method `forward`):** `tf.function(jit_compile=True)` (TensorFlow)
*   **L82 (Method `forward`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L83 (Method `forward`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L86 (Method `forward`):** `return tensor / self._scale_factors_gm[:, tf.newaxis, :]` (TensorFlow)
*   **L88 (Method `inverse`):** `tf.function(jit_compile=True)` (TensorFlow)
*   **L89 (Method `inverse`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L90 (Method `inverse`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L93 (Method `inverse`):** `return tensor * self._scale_factors_gm[:, tf.newaxis, :]` (TensorFlow)
*   **L108 (Method `__init__`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L109 (Method `__init__`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L110 (Method `__init__`):** `tf.Tensor | None` (TensorFlow Type Hint)
*   **L119 (Method `__init__`):** `self._population_scaling_factors = tf.where(population_scaling_id, population[:, None], tf.ones_like(population)[:, None])` (TensorFlow)
*   **L122 (Method `__init__`):** `population_scaled_tensor = tensor / self._population_scaling_factors[:, None, :]` (TensorFlow)
*   **L124 (Method `__init__`):** `self._means = tf.reduce_mean(population_scaled_tensor, axis=(0, 1))` (TensorFlow)
*   **L125 (Method `__init__`):** `self._stdevs = tf.math.reduce_std(population_scaled_tensor, axis=(0, 1))` (TensorFlow)
*   **L128 (Method `__init__`):** `self._means = tf.reduce_mean(tensor, axis=(0, 1))` (TensorFlow)
*   **L129 (Method `__init__`):** `self._stdevs = tf.math.reduce_std(tensor, axis=(0, 1))` (TensorFlow)
*   **L131 (Method `forward`):** `tf.function(jit_compile=True)` (TensorFlow)
*   **L132 (Method `forward`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L133 (Method `forward`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L137 (Method `forward`):** `tensor /= self._population_scaling_factors[:, None, :]` (TensorFlow)
*   **L138 (Method `forward`):** `return tf.math.divide_no_nan(tensor - self._means, self._stdevs)` (TensorFlow)
*   **L140 (Method `inverse`):** `tf.function(jit_compile=True)` (TensorFlow)
*   **L141 (Method `inverse`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L142 (Method `inverse`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L145 (Method `inverse`):** `scaled_tensor = tensor * self._stdevs + self._means` (TensorFlow)
*   **L147 (Method `inverse`):** `scaled_tensor * self._population_scaling_factors[:, None, :]` (TensorFlow)
*   **L159 (Method `__init__`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L160 (Method `__init__`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L166 (Method `__init__`):** `population_scaled_kpi = tf.math.divide_no_nan(kpi, self._population[:, tf.newaxis])` (TensorFlow)
*   **L168 (Method `__init__`):** `self._population_scaled_mean = tf.reduce_mean(population_scaled_kpi)` (TensorFlow)
*   **L169 (Method `__init__`):** `self._population_scaled_stdev = tf.math.reduce_std(population_scaled_kpi)` (TensorFlow)
*   **L182 (Method `forward`):** `tf.function(jit_compile=True)` (TensorFlow)
*   **L183 (Method `forward`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L184 (Method `forward`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L187 (Method `forward`):** `tf.math.divide_no_nan(...)` (TensorFlow)
*   **L192 (Method `inverse`):** `tf.function(jit_compile=True)` (TensorFlow)
*   **L193 (Method `inverse`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L194 (Method `inverse`):** `tf.Tensor` (TensorFlow Type Hint)
*   **L198 (Method `inverse`):** `* self._population[:, tf.newaxis]` (TensorFlow)

**`meridian/data/input_data.py`**

*   **L23 (Module):** `import tensorflow_probability as tfp` (TensorFlow Probability)
*   **L66 (Class `InputData`):** Type hints related to `tfp.distributions.Distribution` might appear in future versions or related internal code but are not explicitly present here. (Potential future TensorFlow Probability usage)

**`meridian/model/knots.py`**

*   **L21 (Module):** `import numpy as np` (Used alongside TF, but not TF itself)

**Other Files (`.py`, `.yml`, `.md`, `.html.jinja`, `.scss`, `.toml`, `.cff`, `.gitignore`, `.pylintrc`, `LICENSE`, `MANIFEST.in`)**

*   No direct runtime usage of TensorFlow or TensorFlow Probability was identified in these files based on the provided context. They primarily contain configuration, documentation, build instructions, or non-Python code.